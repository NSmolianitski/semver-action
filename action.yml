name: 'Semantic Version Bumper'
description: 'Gets the last tag, bumps version, creates a new tag and release'

inputs:
  github_token:
    description: 'GitHub token for creating releases'
    required: true
  skip_push:
    description: 'Skips new tag creation and pushing if true. Default is false'
    required: false
    type: boolean
    default: false
  additional_name:
    description: 'Affects the search for tags with this name and is added to the resulting tag. Use if you have multiple services versioned with this action'
    required: false
    default: ''
  mainline_versioning_branches:
    description: 'List of branches that should use mainline versioning. Defaults are "main" and "master"'
    required: false
    default: 'main,master'

outputs:
  new_version:
    value: '${{ steps.versioning.outputs.new_version }}'
    description: 'New version'
  new_version_raw:
    description: 'New version without prefix (for branches it is just the last number)'
    value: '${{ steps.versioning.outputs.new_version_raw }}'
  prefix:
    description: 'Prefix'
    value: '${{ steps.versioning.outputs.prefix }}'

runs:
  using: 'composite'
  steps:
    - name: Detect version strategy
      id: detect_strategy
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          MSG="${{ github.event.pull_request.title }}"
        else
          MSG=$(git log -1 --pretty=%B)
        fi

        if [[ "$MSG" == *"#major"* ]]; then
          echo "strategy=major" >> $GITHUB_OUTPUT
        elif [[ "$MSG" == *"#minor"* ]]; then
          echo "strategy=minor" >> $GITHUB_OUTPUT
        elif [[ "$MSG" == *"#patch"* ]]; then
          echo "strategy=patch" >> $GITHUB_OUTPUT
        fi

    - name: Get last tag and branch name
      id: get_tag
      shell: bash
      run: |
        set -euo pipefail
        
        # 1) Получаем дополнительный префикс (может быть пустым)
        ADDITIONAL_NAME="${{ inputs.additional_name }}"
        if [[ -n "$ADDITIONAL_NAME" ]]; then
          NAME_MATCH_PATTERN="${ADDITIONAL_NAME}."
        else
          NAME_MATCH_PATTERN=""
        fi
        
        # 2) Собираем все теги вида [PREFIX]vX.Y.Z{-N…}
        ALL_TAGS=$(
          git for-each-ref \
          --sort=-version:refname \
          --format='%(refname:short)' \
          "refs/tags/${NAME_MATCH_PATTERN}v[0-9]*\.[0-9]*\.[0-9]*"
        )
        
        # 3) Получаем последний «чистый» тег для main-ветки (без суффикса)
        LATEST_MAIN_TAG=$(
          grep -E "^${NAME_MATCH_PATTERN}v[0-9]+\.[0-9]+\.[0-9]+$" <<<"$ALL_TAGS" \
          | head -n1 || true
        )
        
        # 4) Получаем последний тег для ветки (с суффиксом)
          LATEST_BRANCH_TAG=$(
          grep -E "^${NAME_MATCH_PATTERN}v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$" <<<"$ALL_TAGS" \
          | head -n1 || true
        )
        
        # 5) Пишем в outputs
        echo "latest_main_tag=$LATEST_MAIN_TAG" >> "$GITHUB_OUTPUT"
        echo "latest_branch_tag=$LATEST_BRANCH_TAG" >> "$GITHUB_OUTPUT"
        echo "branch_name=${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}" >> "$GITHUB_OUTPUT"

    - name: Calculate new version
      id: versioning
      uses: nsmolianitski/semver-versioning-action@v0.0.12
      with:
        latest_main_version: ${{ steps.get_tag.outputs.latest_main_tag }}
        latest_branch_version: ${{ steps.get_tag.outputs.latest_branch_tag }}
        version_strategy: ${{ steps.detect_strategy.outputs.strategy }}
        branch_name: ${{ steps.get_tag.outputs.branch_name }}
        additional_name: ${{ inputs.additional_name }}
        mainline_versioning_branches: ${{ inputs.mainline_versioning_branches }}

    - name: Create new tag
      if: ${{ inputs.skip_push != 'true' }}
      shell: bash
      run: |
        set -e
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        echo "Creating tags with version: ${{ steps.versioning.outputs.new_version }}"
        latest_tag_name="latest"
        if [ -n "${{ inputs.additional_name }}" ]; then
          tag_name="${{ inputs.additional_name }}-latest"
        fi
        git tag "$latest_tag_name" -f

        echo "Creating major version tag: ${{ steps.versioning.outputs.major }}"
        git tag ${{ steps.versioning.outputs.major }} -f

        echo "Creating minor version tag: ${{ steps.versioning.outputs.minor }}"
        git tag ${{ steps.versioning.outputs.minor }} -f

        echo "Creating full version tag: ${{ steps.versioning.outputs.new_version }}"
        git tag ${{ steps.versioning.outputs.new_version }}
        git push origin --force --tags
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
