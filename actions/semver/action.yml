name: 'Semantic Version Bumper'
description: 'Gets the last tag, bumps version, creates a new tag and release'

inputs:
  github_token:
    description: 'GitHub token for creating releases'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Detect version strategy
      id: detect_strategy
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          MSG="${{ github.event.pull_request.title }}"
        else
          MSG=$(git log -1 --pretty=%B)
        fi

        if [[ "$MSG" == *"#major"* ]]; then
          echo "strategy=major" >> $GITHUB_OUTPUT
        elif [[ "$MSG" == *"#minor"* ]]; then
          echo "strategy=minor" >> $GITHUB_OUTPUT
        elif [[ "$MSG" == *"#patch"* ]]; then
          echo "strategy=patch" >> $GITHUB_OUTPUT
        fi

    - name: Get last tag
      id: get_tag
      shell: bash
      run: |
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "last_tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Calculate new version
      id: versioning
      uses: ./actions/versioning
      with:
        base_version: ${{ steps.get_tag.outputs.last_tag }}
        version_strategy: ${{ steps.detect_strategy.outputs.strategy }}
        branch_name: ${{ github.event_name == 'push' && github.ref_name || github.event.pull_request.head.ref }}

    - name: Create new tag
      shell: bash
      run: |
        git tag ${{ steps.versioning.outputs.new_version }}
        git push origin ${{ steps.versioning.outputs.new_version }}

    - name: Generate release notes
      id: generate_notes
      shell: bash
      run: |
        NOTES=$(git log --pretty=format:"- %s" ${{ steps.get_tag.outputs.last_tag }}..HEAD)
        echo "notes=${NOTES}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ steps.versioning.outputs.new_version }}
        release_name: Release ${{ steps.versioning.outputs.new_version }}
        body: ${{ steps.generate_notes.outputs.notes }}
        draft: false
        prerelease: ${{ contains(steps.versioning.outputs.new_version, '-') }}